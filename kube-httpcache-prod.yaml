trigger: none
pr: none

variables:
  environment: devtest   
  openshiftService: devops-toolchain
  KubeHttpCacheConfigName: 'kube-httpcache'
  openshiftProject: 'devops-toolchain'
  ocVersion: 'v4.13.44'
  kubeHttpCacheVersion: 'stable-2.0'        # selected on 20-10-2025 # <-- bump tag number for each quarterly security review
  sonarQubeConnection: 'sonarcloud'
  goVersion: '1.24.6'                       # selected on 20-10-2025 # <-- select latest go version as per goToolsetTag version number availability from redhat -- https://catalog.redhat.com - reponame - ubi9/go-toolset
  # docker variables below
  goToolsetTag: '1.24.6-1760420453'         # selected  on 20-10-2025 # <-- select latest version from -- https://catalog.redhat.com - reponame - ubi9/go-toolset
  ubiTag: '9.6-1760340943'                  # selected  on 20-10-2025 # <-- select latest version from  -- https://catalog.redhat.com/  - reponame - ubi/ubi9
  promExporterVersion: 'v1.7.0'             # selected  on 20-10-2025 # <-- prom exporter version number from  https://github.com/leontappe/prometheus_varnish_exporter.git
  varnishRepoVersion: '80'                  # selected  on 20-10-2025 # <-- https://packagecloud.io/varnishcache/  repo version from here  # if 8.0 then its 80
  varnishVersion: '8.0.0'                   # selected  on 20-10-2025 # <-- https://packagecloud.io/varnishcache/  varnish version from here - check version inside varnish repo selected
  varishRelease: '1'                        # selected  on 20-10-2025 # <-- https://packagecloud.io/varnishcache/  varnish release number from here - check release number - usually  1 
  varnishArch: 'el9.x86_64'                 # selected  on 20-10-2025 # <-- https://packagecloud.io/varnishcache/  varnish architecture from here - mostly does not change
stages:
  - stage: GoVulnCheck
    displayName: 'Go Vulnerability Scan'
    jobs:
      - job: VulnScan
        displayName: 'Run govulncheck'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: GoTool@0
          inputs:
            version: $(goVersion)
          
        - script: |
            export PATH=$PATH:$(go env GOPATH)/bin
            go install golang.org/x/vuln/cmd/govulncheck@latest
            govulncheck ./...
          displayName: 'Install govulncheck and scan'
  - stage: SonarQube_Analysis
    displayName: 'SonarQube Analysis'
    dependsOn: GoVulnCheck
    jobs:
        - job: SonarQube
          displayName: 'Run SonarQube Scanner'
          steps:
            - task: SonarCloudPrepare@3
              inputs:
                SonarQube: $(sonarQubeConnection)
                organization: 'city-of-helsinki'
                scannerMode: 'CLI'
                configMode: 'manual'
                cliProjectKey: 'kube-httpcache'
                cliProjectName: 'kube-httpcache'
                cliSources: '.'
            - task: SonarCloudAnalyze@3
            - task: SonarCloudPublish@3
              inputs:
                pollingTimeoutSec: '300'
                failWhenQualityGateFails: true
  - stage: build_kube_httpcache
    displayName: 'Build KubeHttpCache Image'
    dependsOn: SonarQube_Analysis
    condition: succeeded()
    jobs:
      - template: templates/build-kube-httpcache.yml
        parameters:
          environment: $(environment)
          openshiftService: $(openshiftService)
          namespace: $(openshiftProject)
          ocVersion: $(ocVersion)
          KubeHttpCacheConfigName: $(KubeHttpCacheConfigName)
          kubeHttpCacheVersion: $(kubeHttpCacheVersion)
          ubiTag: $(ubiTag)
          goToolsetTag: $(goToolsetTag)
          promExporterVersion: $(promExporterVersion)
          varnishRepoVersion: $(varnishRepoVersion)
          varnishVersion: $(varnishVersion)
          varishRelease: $(varishRelease)
          varnishArch: $(varnishArch)