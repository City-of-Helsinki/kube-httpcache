trigger: none
pr: none

variables:
  environment: devtest   #<< change this for every environment
  openshiftService: devops-toolchain  #<< change this for every environment
  KubeHttpCacheConfigName: 'kube-httpcache'
  openshiftProject: 'devops-toolchain'
  ocVersion: 'v4.13.44'
  kubeHttpCacheVersion: 'stable-1.0'
  sonarQubeConnection: 'sonarcloud'
  goVersion: '1.23.6'  
  goInstallPath: '/usr/local/go'
  govulncheckVersion: 'latest'

stages:
  - stage: GoVulnCheck
    displayName: 'Go Vulnerability Scan'
    jobs:
      - job: VulnScan
        displayName: 'Run govulncheck'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: GoTool@0
          inputs:
            version: $(goVersion)
          
        - script: |
            export PATH=$PATH:$(go env GOPATH)/bin
            go install golang.org/x/vuln/cmd/govulncheck@latest
            govulncheck ./...
          displayName: 'Install govulncheck and scan'
  - stage: SonarQube_Analysis
    displayName: 'SonarQube Analysis'
    dependsOn: GoVulnCheck
    jobs:
        - job: SonarQube
          displayName: 'Run SonarQube Scanner'
          steps:
            - task: SonarCloudPrepare@3
              inputs:
                SonarQube: $(sonarQubeConnection)
                organization: 'city-of-helsinki'
                scannerMode: 'CLI'
                configMode: 'manual'
                cliProjectKey: 'kube-httpcache'
                cliProjectName: 'kube-httpcache'
                cliSources: '.'
            - task: SonarCloudAnalyze@3
            - task: SonarCloudPublish@3
              inputs:
                pollingTimeoutSec: '300'
                failWhenQualityGateFails: true
  - stage: build_kube_httpcache
    displayName: 'Build KubeHttpCache Image'
    dependsOn: SonarQube_Analysis
    condition: succeeded()
    jobs:
      - template: templates/build-kube-httpcache.yml
        parameters:
          environment: $(environment)
          openshiftService: $(openshiftService)
          namespace: $(openshiftProject)
          ocVersion: $(ocVersion)
          KubeHttpCacheConfigName: $(KubeHttpCacheConfigName)
          kubeHttpCacheVersion: $(kubeHttpCacheVersion)